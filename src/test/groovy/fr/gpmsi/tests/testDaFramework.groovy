package fr.gpmsi.tests

import groovy.sql.Sql
import fr.gpmsi.JdbcUtils
import java.text.SimpleDateFormat
import java.text.NumberFormat
import java.text.DecimalFormat
import java.util.Locale
import fr.gpmsi.da.*

def db = [driver:'org.postgresql.Driver',
          url: args.jdbcurl, user: args.jdbcuser, password: args.jdbcpwd]
gsql = Sql.newInstance(db.url, db.user, db.password, db.driver)

if (JdbcUtils.tableExists(gsql.connection, "daotests_a", false)) {
    println("Table daotests_a existe, effacement.")
    gsql.execute('DROP TABLE daotests_a')
}

gsql.execute('''
CREATE TABLE daotests_a (
  id INTEGER PRIMARY KEY,
  vc1 VARCHAR(1),
  vc22 VARCHAR(22),
  i1 INTEGER,
  d1 DATE,
  ts1 TIMESTAMP
)
''')

println('Table daotests_a creee.')

gsql.execute('''
INSERT INTO daotests_a(id,vc1,vc22,i1,d1,ts1) VALUES (1,'X','ABCD',9876543,{d '1999-12-18'}, {ts '1998-11-30 22:33:59'})
''')

class Daotests_a extends Dao {
    Daotests_a(String tableName) {
        super(tableName)
        pkcol(new CInteger('id'))
        col(new CVarchar('vc1', 1))
        col(new CVarchar('vc22', 22))
        col(new CInteger('i1'))
        col(new CDate('d1'))
        col(new CTimestamp('ts1'))
    }
}

daotests_a = new Daotests_a('daotests_a')

allCols = daotests_a.allColNames.join(',')

//First easy test : get all columns from row#1
sql = "select $allCols from daotests_a where id = ?" as String
gsql.eachRow(sql, [1]) {row ->
    println(row)
}

println("Row 1 exists : " + daotests_a.rowExists(gsql, [1]))
println("Row 2 exists : " + daotests_a.rowExists(gsql, [2]))

row3strvals = ['3','Y','EFGH','8765432','1999-12-17','1998-11-29 22:33:58']
prefs = DaPreferences.defaultPreferences
row3vals = daotests_a.makeValuesFromStrings(row3strvals, prefs)
daotests_a.insertInDb(gsql, row3vals)


if (JdbcUtils.tableExists(gsql.connection, "daotests_b", false)) {
    println("Table daotests_b existe, effacement.")
    gsql.execute('DROP TABLE daotests_b')
}

gsql.execute('''
CREATE TABLE daotests_b (
  id SERIAL PRIMARY KEY, -- cle avec creation automatique
  vc1 VARCHAR(1),
  vc22 VARCHAR(22),
  i1 INTEGER,
  d1 DATE,
  ts1 TIMESTAMP
)
''')

class Daotests_b extends Dao {
    Daotests_b(String tableName) {
        super(tableName)
        pkcol(new CInteger('id').setAutogenerated(true))
        col(new CVarchar('vc1', 1))
        col(new CVarchar('vc22', 22))
        col(new CInteger('i1'))
        col(new CDate('d1'))
        col(new CTimestamp('ts1'))
    }
}

daotests_b = new Daotests_b('daotests_b')

row_b_strvals = ['','Y','EFGH','8765432','1999-12-17','1998-11-29 22:33:58']
row_b_vals = daotests_b.makeValuesFromStrings(row_b_strvals, prefs)
daotests_b.insertInDb(gsql, row_b_vals)

println("Inserted : $row_b_vals")

row_b_strvals = ['','Z','FGHI','7654321','1999-12-16','1998-11-28 22:33:57']
row_b_vals = daotests_b.makeValuesFromStrings(row_b_strvals, prefs)
daotests_b.insertInDb(gsql, row_b_vals)

println("Inserted : $row_b_vals")

DaRow darow_b = new DaRow(daotests_b)
valId = darow_b.vgetid() //marche
// valId = darow_b.vgetid(45) // renvoie Exception Pas d'argument autorises pour un appel 'vget' a 'id'
darow_b.vsetvc22(33)
vc22 = darow_b.vgetvc22()
println("vc22 : $vc22")

row_b2_vals = [null, null, null, null, null, null]
row_b2_vals[0] = row_b_vals[0] //copy this pk
daotests_b.readFromDb(gsql, row_b2_vals)
println(row_b2_vals)


//special ad-hoc class to read french dates and timestamps
//also note here that i1 is missing, and also id !
class Daotests_c extends Dao {
    Daotests_c() {
        super('dummy_table_name')
        col(new CVarchar('vc1', 1))
        col(new CVarchar('vc22', 22))
        col(new CDate('d1').setDateFormat(new SimpleDateFormat('dd/MM/yyyy')))
        col(new CTimestamp('ts1').setDateFormat(new SimpleDateFormat('dd/MM/yyyy HH:mm:ss')))
    }
}

daotests_c = new Daotests_c()

darow_c = new DaRow(daotests_c)

//here values will be read correctly from the string representation
darow_c.setValuesFromStrings(['K','FGHI','15/12/1999','27/11/1998 22:33:57'], prefs) //note the french date format here

darow_b.setValue('id', null) //mettre l'id � null (m�thode traditionnelle) pour qu'elle soit bien g�n�r�e automatiquement
darow_c.copyColumnsTo(['vc1','vc22','d1','ts1'], darow_b)

darow_b.insertInDb(gsql)


//special ad-hoc class to read french dates and timestamps and integers
//here all columns are present but not in the same order !
class Daotests_d extends Dao {
    Daotests_d() {
        super('dummy_table_name')
        def locFR = Locale.FRANCE
        NumberFormat fnf = NumberFormat.getInstance(locFR);
        if (fnf instanceof DecimalFormat) {
            ((DecimalFormat) fnf).setDecimalSeparatorAlwaysShown(true)
            fnf.setGroupingUsed(true)
            def dfs = fnf.getDecimalFormatSymbols()
            //def gsn = dfs.groupingSeparator as int
            //println("Grouping separator '${dfs.groupingSeparator}' = $gsn") //in france, ascii 160 !
            dfs.groupingSeparator = ' ' as char // put it to a simple space (instead of char #160) for our example
            fnf.setDecimalFormatSymbols(dfs)
        }
        else {
            throw new Exception("Not a decimal format ! " + fnf)
        }
        pkcol(new CInteger('id').setAutogenerated(true))
        col(new CVarchar('vc22', 22))
        col(new CDate('d1').setDateFormat(new SimpleDateFormat('dd/MM/yyyy')))
        col(new CTimestamp('ts1').setDateFormat(new SimpleDateFormat('dd/MM/yyyy HH:mm:ss')))
        col(new CInteger('i1').setNumberFormat(fnf))
        col(new CVarchar('vc1', 1))
    }
}

daotests_d = new Daotests_d()

darow_d = new DaRow(daotests_d)

//here values will be read correctly from the string representation
darow_d.setValuesFromStrings(['','FGHI','15/12/1999','27/11/1998 22:33:57','1000 1024','K'], prefs) //note the old french number format here, with a space grouping separator

darow_b.vsetid(null) //mettre id � null (m�thode dynamique) pour qu'elle soit bien g�n�r�e automatiquement
darow_d.copyAllColumnsTo(darow_b)

darow_b.insertInDb(gsql)


