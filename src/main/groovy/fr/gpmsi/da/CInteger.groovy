package fr.gpmsi.da

import java.text.NumberFormat
import java.text.ParseException

import com.graphbuilder.math.func.LgFunction

import groovy.transform.EqualsAndHashCode

import java.sql.ResultSet
import java.sql.PreparedStatement

import static fr.gpmsi.StringUtils.isEmpty

/**
 * Définition d'une colonne de type Integer (doit contenir au moins 64 bits signés).
 * Par défaut utilise le format java, mais on peut définir un NumberFormat si on veut un format particulier.
 */
@EqualsAndHashCode
class CInteger extends ColumnDef {
    NumberFormat nf
    CInteger(String name, NumberFormat nf, boolean autogenerated) { setName(name) ; this.nf = nf; setAutogenerated(autogenerated) }
    CInteger(String name, NumberFormat nf) { this(name, nf, false) }
    CInteger(String name, boolean autogenerated) { this(name, null, autogenerated) }
    CInteger(String name) { this(name, null) }
    
    CInteger setNumberFormat(NumberFormat nf) { this.nf = nf; return this}
    
    NumberFormat getNumberFormat() { return nf }
    
    //make a correctly typed value from the given String
    Object stringToValue(String str, DaPreferences prefs) {
        //println("In CInteger#stringToValue(), str:$str")
        if (isEmpty(str)) return null
        if (nf == null) return Long.valueOf(str)
        try {
            return nf.parse(str) 
        }
        catch (ParseException pex) {
            if (prefs.illegalDatesToNull) return null else throw pex
        }
    }
    
    //make a String from the given value
    String valueToString(Object val, DaPreferences prefs) {
        if (val == null) return ""
        if (val instanceof Number) return ((Number)val).toString()
        //TODO ajouter une trace dans le debogage
        return ""; //ce n'est pas un nombre, juste retourner ""
    }
    
    /** Set value in PreparedStatement (including correct type for setNull). Uses setLong */
    void setPsValue(PreparedStatement ps, int index, Object val) {
        if (val == null) ps.setNull(Types.INTEGER)
        else ps.setLong(val as long)
    }

    /** Get value from ResultSet */
    Object getRsValue(ResultSet rs, int index) {
        long v = rs.getLong()
        if (rs.wasNull()) return null else return v
    }
    
    String getDdl(String dialect) {
      if (dialect.equalsIgnoreCase("H2")) {
        if (isAutogenerated()) return "$name BIGINT GENERATED ALWAYS AS IDENTITY" //see https://h2database.com/html/grammar.html#column_definition
        else return "$name BIGINT"
      }
      else return "Dialecte non pris en charge : $dialect"
    }


}
