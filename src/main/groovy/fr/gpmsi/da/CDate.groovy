package fr.gpmsi.da

import java.util.Date

import groovy.transform.EqualsAndHashCode

import java.sql.ResultSet
import java.sql.PreparedStatement
import java.text.ParseException
import java.text.SimpleDateFormat
import java.text.DateFormat

/**
 * DÃ©finition d'une colonne de type de donnee Date
 */
@EqualsAndHashCode
class CDate extends ColumnDef {
    static SimpleDateFormat isoSdf = new SimpleDateFormat('yyyy-MM-dd')
    static SimpleDateFormat frSdf = new SimpleDateFormat('dd/MM/yyyy')
    DateFormat df

    boolean isAutogenerated() { return false }
    
    CDate(String name) { setName(name) }
    
    CDate(String name, DateFormat df) { setName(name) ; this.df = df }
    
    CDate setDateFormat(DateFormat df) { this.df = df; return this }
    
    int getMaxLength() { return 0 }
    
    //produire une donnee correctement typee a partir de la String donnee
    Object stringToValue(String str, DaPreferences prefs) {
        if (str == null || str.trim() == "") return null
        if (df != null) {
            try {
                return new java.sql.Date(df.parse(str).getTime()) //use supplied DateFormat
            }
            catch (ParseException pex3) {
                if (prefs.illegalDatesToNull) return null else throw pex3
            }
        }
        //Pas de format identifie. Essayer Iso, et si cela ne fonctionne pas, 
        //essayer le format francais
        try { return new java.sql.Date(isoSdf.parse(str).getTime()) }
        catch (ParseException pex) {
            try { return new java.sql.Date(frSdf.parse(str).getTime()) }
            catch (ParseException pex2) { 
                if (prefs.illegalDatesToNull) return null else throw pex2
            }
        }
    }
    
    /** faire une String a partir de la valeur fournie */
    String valueToString(Object val, DaPreferences prefs) {
        if (val == null) return ""
        return idoDf.format(val)
    }

    /** attribuer la valeur dans le PreparedStatement  (y compris le type correct pour setNull). Accepte java.util.Date ou java.sql.Date */
    void setPsValue(PreparedStatement ps, int index, Object val) {
        if (val == null) ps.setNull(index, Types.DATE)
        else {
            if (val instanceof java.sql.Date) ps.setDate(val as java.sql.Date)
            else {
                java.util.Date d1 = val as java.util.Date
                java.sql.Date d2 = new java.sql.Date(d1.getTime())
            }
        }
    }
    
    /** Prendre la valeur dans le ResultSet */
    Object getRsValue(ResultSet rs, int index) {
        return rs.getDate(index)
    }
    
    String getDdl(String dialect) {
      if (dialect.equalsIgnoreCase("H2")) {
        return "$name DATE"
      }
      else return "Dialecte non pris en charge : $dialect"
    }


}

