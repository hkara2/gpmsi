//☺:encoding=UTF-8:
//nécessite Gradle 8.2.1 ou ultérieur
//certaines librairies non disponibles via un repository maven (pmsixml, aagbl)
//sont utilisées localement dans un répertoire

plugins {
  id 'java'
  //id 'java-library' //genere le jar
  //id 'application'
  id 'groovy'
  id 'distribution'
  id 'eclipse'
}

configurations {
    javadocjars
}

//apply plugin: 'java'
//apply plugin: 'groovy'

//apply plugin: 'distribution'

java {
  //pour java, nous voulons que l'exécution puisse se faire sur java 8
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  withJavadocJar()
  //withGroovydocJar() //non malheureusement cette option n'existe pas
  withSourcesJar() //nous voulons aussi un jar avec le code source
}

Properties antprops = new Properties()
antprops.load(new FileReader(layout.projectDirectory.file("ant-build.properties").asFile))

//en cas de doublon de fichier, ne pas déclencher d'erreur, juste écraser
processResources.duplicatesStrategy='include'

//Si il y a des problèmes de fichiers non trouvés à la compilation, essayer : gradle build --refresh-dependencies

ext.PROJECT_VERSION = antprops.PROJECT_VERSION //ex : 1.1
ext.PROJECT_SUB_VERSION = antprops.PROJECT_SUB_VERSION //ex : .0

version = ext.PROJECT_VERSION + ext.PROJECT_SUB_VERSION


//pas d'effet
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

//pas d'effet
tasks.withType(AbstractCopyTask).configureEach {
    if(getDuplicatesStrategy() == DuplicatesStrategy.INCLUDE) {
        setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
}

rootProject.tasks.named("groovydoc") {
    //duplicatesStrategy = 'include'
}

// Call this with explicit utf-8 encoding, e.g. gradlew -Dfile.encoding=utf-8 groovydoc
groovydoc {
  use = true
  //systemProperties = ['utf-8'] 
  //groovyOptions.encoding = 'utf-8'
  //duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  //println getAntGroovydoc()
  //getAntGroovydoc().duplicatesStrategy = 'include'
  overviewText = resources.text.fromString("Toutes les classes (Groovy <i>et</i> java) de Gpmsi")
  //ajout supplémentaire de sources java ce qui permet d'avoir tout (groovy+java) !
  source(sourceSets.main.allJava) 
}

build.dependsOn 'groovydoc'

//A voir si on garde cette tache
task prepareJavadoc {
    //nous voulons intégrer les javadocs de pmsixml
    //println layout.buildDirectory.class
    def docsDirProvider = layout.buildDirectory.dir('docs/pmsixml-javadoc')
    //println docsDirProvider.class
    //File docsDirFile = docsDirProvider.get().getAsFile()
    //if (!docsDirFile.exists()) docsDirFile.mkdir()
    //def pmsixmlJavadocsDirFile = new File(docsDirFile, 'pmsixml-javadoc')
    //if (!pmsixmlJavadocsDirFile.exists()) pmsixmlJavadocsDirFile.mkdir()
    //println pmsixmlJavadocsDir
    FileTree pjd = zipTree(file("lib/${antprops.PMSIXMLLIB}-javadoc.jar"))
    //pjd.copy 
    //println 'javadoc prepared'
}

task copyPmsixmlJavadoc(type: Copy) {
    dependsOn prepareJavadoc
    from(zipTree(file("lib/${antprops.PMSIXMLLIB}-javadoc.jar")))
    into(layout.buildDirectory.dir('docs/pmsixml-javadoc'))
}
//copyPmsixmlJavadoc.dependsOn prepareJavadoc

javadoc {
    dependsOn copyPmsixmlJavadoc
    //cf. https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html
    source = sourceSets.main.allJava
    options.overview "$projectDir/src/main/java/overview.html"
    //println "options.overview : ${options.overview}"
    options {
        encoding = 'UTF-8'
        source = '8' //cf. https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDBGDFI
        //addBooleanOption('html4', true) //pour ne pas avoir à forcer table caption
        //pour adresser les javadocs de java, il _faut_ utiliser linksOffline.
        //il faut aussi télécharger à la main le fichier "package-list" et le mettre dans un répertoire local. Je l'ai mis dans doc/java8-package-list/ 
        linksOffline 'https://docs.oracle.com/javase/8/docs/api/', "$projectDir/doc/java8-package-list/"
        //liens vers les docs issues de pmsixml (que j'ai recopié par une commande après chaque build de pmsixml)
        //linksOffline '../pmsixml-javadoc', layout.buildDirectory.dir('docs/pmsixml-javadoc').get().getAsFile().getPath()
        linksOffline '../pmsixml-javadoc', "$buildDir/docs/pmsixml-javadoc"
        linksOffline 'https://javadoc.io/static/com.github.albfernandez/javadbf/1.14.1', "$projectDir/doc/javadbf-1.14.1-package-list/"
        linksOffline 'https://javadoc.io/doc/org.apache.groovy/groovy-all/4.0.8/', "$projectDir/doc/groovy-all-4.0.8-element-list/"
        linksOffline 'https://javadoc.io/doc/org.apache.logging.log4j/log4j-core/2.20.0/', "$projectDir/doc/log4j-core-2.20.0-package-list/"
        linksOffline 'https://javadoc.io/doc/org.apache.logging.log4j/log4j-api/2.20.0/', "$projectDir/doc/log4j-api-2.20.0-package-list/"
        linksOffline 'https://javadoc.io/doc/org.apache.poi/poi/5.2.3/', "$projectDir/doc/apache-poi-5.2.3-element-list/"
        linksOffline 'https://javadoc.io/doc/com.opencsv/opencsv/3.9/', "$projectDir/doc/opencsv-3.9-package-list/"
        linksOffline 'https://hapifhir.github.io/hapi-hl7v2/base/apidocs/', "$projectDir/doc/hapi-package-list/"
    }    
    //un bug empêche les "doc-files" d'être bien copiées, il faut les copier à la main ...
    doLast{
        copy{
             from "src/main/java/fr/gpmsi/doc-files"
             into "$project.buildDir/docs/javadoc/fr/gpmsi/doc-files"
             include "*.png"
         }
    }
}

//javadoc.dependsOn copyPmsixmlJavadoc

sourcesJar {
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE) //pour les jars, exclure les doublons
}

//Forcer UTF-8 partout pour le code source java (IMPORTANT !)
compileJava.options.encoding = 'UTF-8'

eclipse {
  //demande à eclipse de télécharger les javadocs et les sources pour les librairies.
  classpath {
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    flatDir {
        dirs 'lib'
    }
    mavenCentral()
}

dependencies {
    
    def implementationAndJavadocjars = { dep ->
        implementation dep
        javadocjars dep
    }
    
    //implementation 'org.apache.groovy:groovy-all:4.0.8'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    // on garde la version qui va avec hapi 2.3 -> a verifier
    // implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementationAndJavadocjars 'org.apache.poi:poi:5.2.3'
    
    // https://mvnrepository.com/artifact/org.apache.poi/poi-scratchpad
    implementationAndJavadocjars 'org.apache.poi:poi-scratchpad:5.2.3'

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementationAndJavadocjars 'org.apache.poi:poi-ooxml:5.2.3'

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-lite
    implementationAndJavadocjars 'org.apache.poi:poi-ooxml-lite:5.2.3'

    // https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    implementationAndJavadocjars 'commons-beanutils:commons-beanutils:1.9.3'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementationAndJavadocjars 'commons-cli:commons-cli:1.5.0'
    javadocjars 'commons-cli:commons-cli:1.5.0:javadoc'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementationAndJavadocjars 'commons-codec:commons-codec:1.15'
    javadocjars 'commons-codec:commons-codec:1.15:javadoc'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    implementationAndJavadocjars 'org.apache.commons:commons-collections4:4.4'
    javadocjars 'org.apache.commons:commons-collections4:4.4:javadoc'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-compress
    implementationAndJavadocjars 'org.apache.commons:commons-compress:1.23.0'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementationAndJavadocjars 'commons-io:commons-io:2.11.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementationAndJavadocjars 'org.apache.commons:commons-lang3:3.6'

    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    implementationAndJavadocjars 'commons-logging:commons-logging:1.2'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    implementationAndJavadocjars 'org.apache.commons:commons-math3:3.6.1'

    // https://mvnrepository.com/artifact/commons-net/commons-net
    implementationAndJavadocjars 'commons-net:commons-net:3.9.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementationAndJavadocjars 'org.apache.commons:commons-text:1.1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementationAndJavadocjars 'org.apache.logging.log4j:log4j-core:2.20.0'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementationAndJavadocjars 'org.apache.logging.log4j:log4j-api:2.20.0'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-1.2-api
    implementationAndJavadocjars 'org.apache.logging.log4j:log4j-1.2-api:2.20.0'

    // https://mvnrepository.com/artifact/com.h2database/h2
    //implementationAndJavadocjars 'com.h2database:h2:1.4.200'

    // https://mvnrepository.com/artifact/com.h2database/h2
    implementationAndJavadocjars 'com.h2database:h2:2.1.214'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    implementationAndJavadocjars 'org.slf4j:slf4j-simple:2.0.6'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementationAndJavadocjars 'org.slf4j:slf4j-api:2.0.6'

    // https://mvnrepository.com/artifact/ca.uhn.hapi/hapi-base
    implementationAndJavadocjars 'ca.uhn.hapi:hapi-base:2.3'

    // https://mvnrepository.com/artifact/ca.uhn.hapi/hapi-structures-v23
    implementationAndJavadocjars 'ca.uhn.hapi:hapi-structures-v23:2.3'

    // https://mvnrepository.com/artifact/ca.uhn.hapi/hapi-structures-v231
    implementationAndJavadocjars 'ca.uhn.hapi:hapi-structures-v231:2.3'

    // https://mvnrepository.com/artifact/ca.uhn.hapi/hapi-structures-v24
    implementationAndJavadocjars 'ca.uhn.hapi:hapi-structures-v24:2.3'

    // https://mvnrepository.com/artifact/ca.uhn.hapi/hapi-structures-v25
    implementationAndJavadocjars 'ca.uhn.hapi:hapi-structures-v25:2.3'

    // https://mvnrepository.com/artifact/ca.uhn.hapi/hapi-structures-v251
    implementationAndJavadocjars 'ca.uhn.hapi:hapi-structures-v251:2.3'

    // https://mvnrepository.com/artifact/com.github.albfernandez/javadbf
    implementationAndJavadocjars 'com.github.albfernandez:javadbf:1.14.0'

    // https://mvnrepository.com/artifact/junit/junit
    implementationAndJavadocjars 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementationAndJavadocjars 'com.opencsv:opencsv:3.9'

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core
    implementationAndJavadocjars 'org.hamcrest:hamcrest-core:1.3'

    // https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans
    implementationAndJavadocjars 'org.apache.xmlbeans:xmlbeans:5.1.1'

    // https://mvnrepository.com/artifact/com.zaxxer/SparseBitSet
    implementationAndJavadocjars 'com.zaxxer:SparseBitSet:1.2'

    // https://mvnrepository.com/artifact/org.apache.ant/ant
    implementation 'org.apache.ant:ant:1.10.13'

    // https://mvnrepository.com/artifact/org.apache.ant/ant-antlr
    runtimeOnly 'org.apache.ant:ant-antlr:1.10.13'

    // https://mvnrepository.com/artifact/org.apache.ant/ant-launcher
    implementationAndJavadocjars 'org.apache.ant:ant-launcher:1.10.13'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy
    //implementation('org.apache.groovy:groovy') {
    //  version {
    //    strictly '4.0.8'
    //  }
    //}

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-ant
    implementationAndJavadocjars 'org.apache.groovy:groovy-ant:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-astbuilder
    implementationAndJavadocjars 'org.apache.groovy:groovy-astbuilder:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-cli-commons
    implementationAndJavadocjars 'org.apache.groovy:groovy-cli-commons:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-cli-picocli
    implementationAndJavadocjars 'org.apache.groovy:groovy-cli-picocli:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-console
    implementationAndJavadocjars 'org.apache.groovy:groovy-console:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-datetime
    implementationAndJavadocjars 'org.apache.groovy:groovy-datetime:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-dateutil
    implementationAndJavadocjars 'org.apache.groovy:groovy-dateutil:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-groovysh
    implementationAndJavadocjars 'org.apache.groovy:groovy-groovysh:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-json
    implementationAndJavadocjars 'org.apache.groovy:groovy-json:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-macro
    implementationAndJavadocjars 'org.apache.groovy:groovy-macro:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-macro-library
    implementationAndJavadocjars 'org.apache.groovy:groovy-macro-library:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-nio
    implementationAndJavadocjars 'org.apache.groovy:groovy-nio:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-sql
    implementationAndJavadocjars 'org.apache.groovy:groovy-sql:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-swing
    implementationAndJavadocjars 'org.apache.groovy:groovy-swing:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-templates
    implementationAndJavadocjars 'org.apache.groovy:groovy-templates:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-xml
    implementationAndJavadocjars 'org.apache.groovy:groovy-xml:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-yaml
    implementationAndJavadocjars 'org.apache.groovy:groovy-yaml:4.0.8'

    // https://mvnrepository.com/artifact/org.apache.groovy/groovy-yaml
    implementationAndJavadocjars 'org.apache.groovy:groovy-ant:4.0.8'


    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    // on garde la version qui va avec hapi 2.3 (il y a des vulnérabilités, donc toujours exécuter localement, jamais en serveur avec un accès à distance quelconque)
    testImplementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.10'

    //constraints {
    //  // https://mvnrepository.com/artifact/org.apache.groovy/groovy
    //  implementation('org.apache.groovy:groovy:4.0.8') {
    //    because 'specific dependencies declared for ipf'
    //  }
    //}

    // https://mvnrepository.com/artifact/org.openehealth.ipf.modules/ipf-modules-hl7
//    runtimeOnly(group: 'org.openehealth.ipf.modules', name: 'ipf-modules-hl7', version: '3.4.3') {
//      transitive = true
//    }
    //implementation group: 'org.openehealth.ipf.modules', name: 'ipf-modules-hl7', version: '3.4.3'

    //desactivé car dépend de org.codehaus.groovy:groovy:3.0.18
    // https://mvnrepository.com/artifact/org.openehealth.ipf.modules/ipf-modules-hl7
//    runtimeOnly ('org.openehealth.ipf.modules:ipf-modules-hl7:4.7.0') {
//      //exclude group: 'org.apache.groovy', name: 'groovy'
//    }

    implementation fileTree(include: ['*.jar'], dir: 'lib')

    testImplementation fileTree(include: ['*.jar'], dir: 'lib')
}

sourceSets {
    main {
        groovy {
           //srcDirs = ['src/main/groovy', 'src/main/java']
           //srcDir "src/main/groovy" //ne pas mettre ce srcDir, il est déjà inclus ! et cela déclenche des erreurs groovydoc ensuite ! (à vérifier éventuellement)
        }
        java {
           // srcDirs = ['src/main/groovy', 'src/main/java']
          // srcDir 'src/main/groovy'
          //srcDirs = [] // tout doit être compilé par le plug-in groovy, rien par java (sinon le compilateur java ne trouve pas le groovy qui a été compilé)
        }
        resources {
            srcDir "src/main/resources"
        }
    }
    test {
        resources {
          //adding dir to existing source dirs
          //srcDir "src/main/resources"
        }
    }
}

task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}


//nettoyer un peu la distribution
task cleandist {
    doLast {
        ant {
            filter(filtersfile: "ant-build.properties")

            destdir = "v$PROJECT_VERSION"

            delete(dir: "dist/$destdir/scripts", failonerror: false)
            delete(dir: "dist/$destdir/fichiers-ref", failonerror: false)
            delete(dir: "dist/$destdir/docs", failonerror: false)
            //Effacer tous les fichiers temporaires des exemples groovy pour etre propre
            delete {
                fileset(dir: "exemples-groovy/tmp")
            }, failonerror: false
            delete(dir: "dist/$destdir/exemples-groovy", failonerror: false)
        }
    }
}

//Tâche spéciale de copie + renommage, car le script "inits.groovy" doit être aussi disponible en
//tant que ressource mais avec le nom "initengine.gtxt" 
tasks.register('copyInits', Copy) {
  from layout.projectDirectory.file("src/main/groovy/fr/gpmsi/inits.groovy")
  into layout.projectDirectory.file("src/main/resources/fr/gpmsi")
  rename 'inits.groovy', 'initengine.gtxt'
}

//Ne pas oublier de déclarer la dépendance pour que copyInits soit exécuté avant sourcesJar
sourcesJar.dependsOn 'copyInits'

//dire que le traitement des ressources dépend de la tâche copyInits, qui sera donc appelée avant
processResources.dependsOn 'copyInits'
processTestResources.dependsOn 'copyInits'

//Copie des librairies
task copyToLib(type: Copy) {
    into "${buildDir}/extlibs"
    from configurations.runtimeClasspath
}

build.dependsOn 'copyToLib'

//Construire la distribution
//Faire un cleandist avant une distribution finale, pour effacer d'éventuels fichiers obsolètes
task dist {
    dependsOn build
    doLast {
        def build_extlibs = file('build/extlibs')
        ant {
            filter(filtersfile: "ant-build.properties")
            filter(token: "GPMSILIB", value: "gpmsi-" + version)

            destdir = "v$PROJECT_VERSION"

            //copier les librairies y compris bien sur gpmsi
            mkdir(dir: "dist/$destdir")

            copy(todir: "dist/$destdir/lib", preservelastmodified: true) {
                fileset(dir: "lib")
            }
            if (build_extlibs.exists()) {
              copy(todir: "dist/$destdir/lib", preservelastmodified: true) {
                  fileset(dir: "build/extlibs")
              }
            }
            copy(file: "build/libs/gpmsi-${version}.jar", todir: "dist/$destdir/lib", preservelastmodified: true)

            //copier les scripts, en les adaptant a la version actuelle
            mkdir(dir: "dist/$destdir/scripts")

            //"toucher" gpmsi.bat pour le forcer à être régénéré
            touch(file: "script-templates/gpmsi.bat")

            filter(token: "JAVA_COMMAND", value: "java")
            filter(token: "START_JAVA", value: "")

            //copie des éléments de scripts à filtrer
            copy(todir: "dist/$destdir/scripts", filtering: "true", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "script-templates")
            }
            //copie des éléments de scripts dont les binaires doivent être gardés tels quels (notamment les fichiers .xlsx)
            copy(todir: "dist/$destdir/scripts", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "script-bin-parts")
            }

            //copier une version "w" de gpmsi.bat, qui ferme la fenetre de terminal apres s'etre lance
            filter(token: "JAVA_COMMAND", value: "javaw")
            filter(token: "START_JAVA", value: "start \"\" /B ")

            copy(file: "script-templates/gpmsi.bat", tofile: "dist/$destdir/gpmsiw.bat", filtering: "true", overwrite: "true", preservelastmodified: true)

            //bouger les scripts gpmsi.bat, menu.bat et menu.html a la racine de la distrib
            move(file: "dist/$destdir/scripts/gpmsi.bat", todir: "dist/$destdir")
            move(file: "dist/$destdir/scripts/menu.bat", todir: "dist/$destdir")
            move(file: "dist/$destdir/scripts/menu.html", todir: "dist/$destdir")

            //copier les fichiers de reference
            mkdir(dir: "dist/$destdir/fichiers-ref")

            copy(todir: "dist/$destdir/fichiers-ref", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "fichiers-ref")
            }

            //copier le repertoire de docs
            mkdir(dir: "dist/$destdir/docs")

            copy(todir: "dist/$destdir/docs", filtering: "true", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "doc") {
                    exclude(name: "**/*.pdf")
                    exclude(name: "**/*.jpg")
                    exclude(name: "**/*.png")
                    exclude(name: "**/*.pdf")
                    exclude(name: "**/*.svg")
                    exclude(name: "**/*.xlsx")
                }
            }

            copy(todir: "dist/$destdir/docs", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "doc") {
                    include(name: "**/*.pdf")
                    include(name: "**/*.jpg")
                    include(name: "**/*.png")
                    include(name: "**/*.pdf")
                    include(name: "**/*.svg")
                    include(name: "**/*.xlsx")
                }
            }

            //copier les repertoires des javadocs dans les docs de sortie
            mkdir(dir: "dist/$destdir/docs/javadoc")
            mkdir(dir: "dist/$destdir/docs/pmsixml-javadoc")

            //les créer au cas où ils n'existeraient pas encore (si "javadoc" n'a pas été lancé)
            mkdir(dir: "build/docs/javadoc/")
            mkdir(dir: "build/docs/pmsixml-javadoc/")

            copy(todir: "dist/$destdir/docs/javadoc", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "build/docs/javadoc/")
            }

            copy(todir: "dist/$destdir/docs/pmsixml-javadoc", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "build/docs/pmsixml-javadoc/")
            }

            //copier les repertoires des groovydocs dans les docs de sortie
            mkdir(dir: "dist/$destdir/docs/groovydoc")

            //les créer au cas où ils n'existeraient pas encore (si "groovydoc" n'a pas été lancé)
            mkdir(dir: "build/docs/groovydoc/")

            copy(todir: "dist/$destdir/docs/groovydoc", filtering: "false", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "build/docs/groovydoc/")
            }
            
            //Effacer tous les fichiers temporaires des exemples groovy pour etre propre
            mkdir(dir: "dist/$destdir/exemples-groovy")
            copy(todir: "dist/$destdir/exemples-groovy", filtering: "true", overwrite: "true", preservelastmodified: true) {
                fileset(dir: "exemples-groovy")
            }

            copy(todir: "dist/$destdir/", file: "dist/$destdir/docs/a-lire.txt", preservelastmodified: true)
        }//ant

    }//doLast
}//dist

//dist.dependsOn build

task zip(type:Zip, dependsOn :[dist]) {
    String zipName = "gpmsi-${PROJECT_VERSION}.zip"

    from "dist" //la distribution inclut le repertoire avec la version, c'est normal.

    version = "$PROJECT_VERSION"
    archiveBaseName = "gpmsi"
}

//zip.dependsOn dist


task downloadJavadocAndSource {
    inputs.files configurations.javadocjars
    outputs.dir "${buildDir}/source-and-javadoc-downloads"
    doLast {
        def componentIds = configurations.javadocjars.incoming.resolutionResult.allDependencies.collect { it.selected.id }
        ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
            .forComponents(componentIds)
            .withArtifacts(JvmLibrary, SourcesArtifact)
            .execute()
        def sourceArtifacts = []
        result.resolvedComponents.each { ComponentArtifactsResult component ->
            Set<ArtifactResult> sources = component.getArtifacts(SourcesArtifact)
            println "Found ${sources.size()} sources for ${component.id}"
            sources.each { ArtifactResult ar ->
                if (ar instanceof ResolvedArtifactResult) {
                    sourceArtifacts << ar.file
                }
            }
        }

        copy {
            from configurations.javadocjars
            from sourceArtifacts
            into "${buildDir}/source-and-javadoc-downloads"
        }
    }
}

